[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pycodegen-agent"
dynamic = ["version"]
description = 'LLM Agent for Python code generation'
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = [
  "LLM",
  "agent",
  "codegen",
]
authors = [
  { name = "tgran2028", email = "timothyrgran@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: Freely Distributable",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
  "click",
]

[project.urls]
Documentation = "https://github.com/unknown/pycodegen-agent#readme"
Issues = "https://github.com/unknown/pycodegen-agent/issues"
Source = "https://github.com/unknown/pycodegen-agent"

[tool.hatch.version]
path = "src/pycodegen_agent/__about__.py"


[tool.hatch.envs.default]
dependencies = [
  "pre-commit",
  # type check
  "mypy",
  "coverage[toml]>=6.5",
  # test
  "pytest",
  "pytest-cov",
  "tox",
  "responses",
  # linting
  "pylint",
  # formatting
  "black[jupyter]",
  "isort",
  "ruff",
  # code quality
  "pyupgrade",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]
format = "isort ./src && black ./src"

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11"]

[tool.hatch.envs.types]
dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/pycodegen_agent tests}"

# -------------------------------------------
# Tools
# -------------------------------------------

# ~~ coverage ~~
[tool.coverage.run]
source_pkgs = ["pycodegen_agent", "tests"]
branch = true
parallel = true
omit = [
  "src/pycodegen_agent/__about__.py",
  "tests/*",
]

[tool.coverage.paths]
pycodegen_agent = ["src/pycodegen_agent", "*/pycodegen-agent/src/pycodegen_agent"]
tests = ["tests", "*/pycodegen-agent/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

# ~~ mypy ~~
[tool.mypy]
warn_return_any = false
warn_unused_configs = true
ignore_missing_imports = true

# ~~ black ~~
[tool.black]
line-length = 120
target-version = ["py38"]



# [tool.hatch.envs.default]
# dependencies = [
#   "pre-commit",
#   # Type check
#   "mypy",
#   # Test
#   "pytest",
#   "pytest-cov",
#   "pytest-custom_exit_code",  # used in the CI
#   "pytest-asyncio",
#   "flaky",
#   "responses",
#   "tox",
#   "coverage",
#   "python-multipart",
#   "psutil",
#   # Linting
#   "pylint",
#   # Documentation
#   "toml",
#   "reno",
#   # dulwich is a reno dependency, they pin it at >=0.15.0 so pip takes ton of time to resolve the dependency tree.
#   # We pin it here to avoid taking too much time.
#   # https://opendev.org/openstack/reno/src/branch/master/requirements.txt#L7
#   "dulwich>=0.21.0,<1.0.0",
#   # Version specified following Black stability policy:
#   # https://black.readthedocs.io/en/stable/the_black_code_style/index.html#stability-policy
#   "black[jupyter]~=23.0",
# ]


[tool.ruff]
target-version = "py38"
ignore = [
  "F401",     # unused-import
  "PERF401",	# Use a list comprehension to create a transformed list
  "PLR1714",  # repeated-equality-comparison
  "PLR5501",  # collapsible-else-if
  "PLW2901",  # redefined-loop-name
  "SIM108",   # if-else-block-instead-of-if-exp
  "SIM115",   # open-file-with-context-handler
  "SIM118",   # in-dict-keys
]
select = [
  "ASYNC",  # flake8-async
  "C4",     # flake8-comprehensions
  "C90",    # McCabe cyclomatic complexity
  "CPY",    # flake8-copyright
  "E501",   # Long lines
  "EXE",    # flake8-executable
  "F",      # Pyflakes
  "FURB",   # refurb
  "INT",    # flake8-gettext
  "PERF",   # Perflint
  "PL",     # Pylint
  "Q",      # flake8-quotes
  "SIM",    # flake8-simplify
  "SLOT",   # flake8-slots
  "T10",    # flake8-debugger
  "W",      # pycodestyle
  "YTT",    # flake8-2020
  "I",      # isort
  "E",      # pycodestyle
  # "NPY",  # NumPy-specific rules
  # "PD",   # pandas-vet
  # "PT",   # flake8-pytest-style
  "UP",     # pyupgrade
]

[tool.ruff.mccabe]
max-complexity = 28

[tool.ruff.pylint]
allow-magic-value-types = ["float", "int", "str"]